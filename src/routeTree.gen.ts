/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as AuthedOrgImport } from './routes/_authed/org'
import { Route as AuthedOrgCreateImport } from './routes/_authed/org/create'
import { Route as AuthedOrgOrganizationIdImport } from './routes/_authed/org/$organizationId'
import { Route as AuthedDemoConvexImport } from './routes/_authed/demo.convex'
import { Route as AuthedOrgOrganizationIdIndexImport } from './routes/_authed/org/$organizationId/index'
import { Route as AuthedOrgOrganizationIdChatImport } from './routes/_authed/org/$organizationId/chat'
import { Route as AuthedOrgOrganizationIdChatChatIdImport } from './routes/_authed/org/$organizationId/chat.$chatId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedOrgRoute = AuthedOrgImport.update({
  id: '/org',
  path: '/org',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedOrgCreateRoute = AuthedOrgCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AuthedOrgRoute,
} as any)

const AuthedOrgOrganizationIdRoute = AuthedOrgOrganizationIdImport.update({
  id: '/$organizationId',
  path: '/$organizationId',
  getParentRoute: () => AuthedOrgRoute,
} as any)

const AuthedDemoConvexRoute = AuthedDemoConvexImport.update({
  id: '/demo/convex',
  path: '/demo/convex',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedOrgOrganizationIdIndexRoute =
  AuthedOrgOrganizationIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedOrgOrganizationIdRoute,
  } as any)

const AuthedOrgOrganizationIdChatRoute =
  AuthedOrgOrganizationIdChatImport.update({
    id: '/chat',
    path: '/chat',
    getParentRoute: () => AuthedOrgOrganizationIdRoute,
  } as any)

const AuthedOrgOrganizationIdChatChatIdRoute =
  AuthedOrgOrganizationIdChatChatIdImport.update({
    id: '/$chatId',
    path: '/$chatId',
    getParentRoute: () => AuthedOrgOrganizationIdChatRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authed/org': {
      id: '/_authed/org'
      path: '/org'
      fullPath: '/org'
      preLoaderRoute: typeof AuthedOrgImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/demo/convex': {
      id: '/_authed/demo/convex'
      path: '/demo/convex'
      fullPath: '/demo/convex'
      preLoaderRoute: typeof AuthedDemoConvexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/org/$organizationId': {
      id: '/_authed/org/$organizationId'
      path: '/$organizationId'
      fullPath: '/org/$organizationId'
      preLoaderRoute: typeof AuthedOrgOrganizationIdImport
      parentRoute: typeof AuthedOrgImport
    }
    '/_authed/org/create': {
      id: '/_authed/org/create'
      path: '/create'
      fullPath: '/org/create'
      preLoaderRoute: typeof AuthedOrgCreateImport
      parentRoute: typeof AuthedOrgImport
    }
    '/_authed/org/$organizationId/chat': {
      id: '/_authed/org/$organizationId/chat'
      path: '/chat'
      fullPath: '/org/$organizationId/chat'
      preLoaderRoute: typeof AuthedOrgOrganizationIdChatImport
      parentRoute: typeof AuthedOrgOrganizationIdImport
    }
    '/_authed/org/$organizationId/': {
      id: '/_authed/org/$organizationId/'
      path: '/'
      fullPath: '/org/$organizationId/'
      preLoaderRoute: typeof AuthedOrgOrganizationIdIndexImport
      parentRoute: typeof AuthedOrgOrganizationIdImport
    }
    '/_authed/org/$organizationId/chat/$chatId': {
      id: '/_authed/org/$organizationId/chat/$chatId'
      path: '/$chatId'
      fullPath: '/org/$organizationId/chat/$chatId'
      preLoaderRoute: typeof AuthedOrgOrganizationIdChatChatIdImport
      parentRoute: typeof AuthedOrgOrganizationIdChatImport
    }
  }
}

// Create and export the route tree

interface AuthedOrgOrganizationIdChatRouteChildren {
  AuthedOrgOrganizationIdChatChatIdRoute: typeof AuthedOrgOrganizationIdChatChatIdRoute
}

const AuthedOrgOrganizationIdChatRouteChildren: AuthedOrgOrganizationIdChatRouteChildren =
  {
    AuthedOrgOrganizationIdChatChatIdRoute:
      AuthedOrgOrganizationIdChatChatIdRoute,
  }

const AuthedOrgOrganizationIdChatRouteWithChildren =
  AuthedOrgOrganizationIdChatRoute._addFileChildren(
    AuthedOrgOrganizationIdChatRouteChildren,
  )

interface AuthedOrgOrganizationIdRouteChildren {
  AuthedOrgOrganizationIdChatRoute: typeof AuthedOrgOrganizationIdChatRouteWithChildren
  AuthedOrgOrganizationIdIndexRoute: typeof AuthedOrgOrganizationIdIndexRoute
}

const AuthedOrgOrganizationIdRouteChildren: AuthedOrgOrganizationIdRouteChildren =
  {
    AuthedOrgOrganizationIdChatRoute:
      AuthedOrgOrganizationIdChatRouteWithChildren,
    AuthedOrgOrganizationIdIndexRoute: AuthedOrgOrganizationIdIndexRoute,
  }

const AuthedOrgOrganizationIdRouteWithChildren =
  AuthedOrgOrganizationIdRoute._addFileChildren(
    AuthedOrgOrganizationIdRouteChildren,
  )

interface AuthedOrgRouteChildren {
  AuthedOrgOrganizationIdRoute: typeof AuthedOrgOrganizationIdRouteWithChildren
  AuthedOrgCreateRoute: typeof AuthedOrgCreateRoute
}

const AuthedOrgRouteChildren: AuthedOrgRouteChildren = {
  AuthedOrgOrganizationIdRoute: AuthedOrgOrganizationIdRouteWithChildren,
  AuthedOrgCreateRoute: AuthedOrgCreateRoute,
}

const AuthedOrgRouteWithChildren = AuthedOrgRoute._addFileChildren(
  AuthedOrgRouteChildren,
)

interface AuthedRouteChildren {
  AuthedOrgRoute: typeof AuthedOrgRouteWithChildren
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedDemoConvexRoute: typeof AuthedDemoConvexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedOrgRoute: AuthedOrgRouteWithChildren,
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedDemoConvexRoute: AuthedDemoConvexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/org': typeof AuthedOrgRouteWithChildren
  '/': typeof AuthedIndexRoute
  '/demo/convex': typeof AuthedDemoConvexRoute
  '/org/$organizationId': typeof AuthedOrgOrganizationIdRouteWithChildren
  '/org/create': typeof AuthedOrgCreateRoute
  '/org/$organizationId/chat': typeof AuthedOrgOrganizationIdChatRouteWithChildren
  '/org/$organizationId/': typeof AuthedOrgOrganizationIdIndexRoute
  '/org/$organizationId/chat/$chatId': typeof AuthedOrgOrganizationIdChatChatIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/org': typeof AuthedOrgRouteWithChildren
  '/': typeof AuthedIndexRoute
  '/demo/convex': typeof AuthedDemoConvexRoute
  '/org/create': typeof AuthedOrgCreateRoute
  '/org/$organizationId/chat': typeof AuthedOrgOrganizationIdChatRouteWithChildren
  '/org/$organizationId': typeof AuthedOrgOrganizationIdIndexRoute
  '/org/$organizationId/chat/$chatId': typeof AuthedOrgOrganizationIdChatChatIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/org': typeof AuthedOrgRouteWithChildren
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/demo/convex': typeof AuthedDemoConvexRoute
  '/_authed/org/$organizationId': typeof AuthedOrgOrganizationIdRouteWithChildren
  '/_authed/org/create': typeof AuthedOrgCreateRoute
  '/_authed/org/$organizationId/chat': typeof AuthedOrgOrganizationIdChatRouteWithChildren
  '/_authed/org/$organizationId/': typeof AuthedOrgOrganizationIdIndexRoute
  '/_authed/org/$organizationId/chat/$chatId': typeof AuthedOrgOrganizationIdChatChatIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/org'
    | '/'
    | '/demo/convex'
    | '/org/$organizationId'
    | '/org/create'
    | '/org/$organizationId/chat'
    | '/org/$organizationId/'
    | '/org/$organizationId/chat/$chatId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/org'
    | '/'
    | '/demo/convex'
    | '/org/create'
    | '/org/$organizationId/chat'
    | '/org/$organizationId'
    | '/org/$organizationId/chat/$chatId'
  id:
    | '__root__'
    | '/_authed'
    | '/login'
    | '/_authed/org'
    | '/_authed/'
    | '/_authed/demo/convex'
    | '/_authed/org/$organizationId'
    | '/_authed/org/create'
    | '/_authed/org/$organizationId/chat'
    | '/_authed/org/$organizationId/'
    | '/_authed/org/$organizationId/chat/$chatId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/org",
        "/_authed/",
        "/_authed/demo/convex"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authed/org": {
      "filePath": "_authed/org.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/org/$organizationId",
        "/_authed/org/create"
      ]
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/demo/convex": {
      "filePath": "_authed/demo.convex.tsx",
      "parent": "/_authed"
    },
    "/_authed/org/$organizationId": {
      "filePath": "_authed/org/$organizationId.tsx",
      "parent": "/_authed/org",
      "children": [
        "/_authed/org/$organizationId/chat",
        "/_authed/org/$organizationId/"
      ]
    },
    "/_authed/org/create": {
      "filePath": "_authed/org/create.tsx",
      "parent": "/_authed/org"
    },
    "/_authed/org/$organizationId/chat": {
      "filePath": "_authed/org/$organizationId/chat.tsx",
      "parent": "/_authed/org/$organizationId",
      "children": [
        "/_authed/org/$organizationId/chat/$chatId"
      ]
    },
    "/_authed/org/$organizationId/": {
      "filePath": "_authed/org/$organizationId/index.tsx",
      "parent": "/_authed/org/$organizationId"
    },
    "/_authed/org/$organizationId/chat/$chatId": {
      "filePath": "_authed/org/$organizationId/chat.$chatId.tsx",
      "parent": "/_authed/org/$organizationId/chat"
    }
  }
}
ROUTE_MANIFEST_END */
